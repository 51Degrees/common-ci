parameters:
- name: stageDependencies
  type: object
  default: []
- name: goVersion
  type: string
  default: '1.17.1'

stages:
# This stage check if current branch runs on a pull request merge branch,
# then try to complete the pull request if it is true.
# WARNINGS: This stage should be run at the end of a pipeline, because upon
# completing a pull request the pipeline will be canceled and no stage
# or tasks will be run after this.
- stage: Go_List
  displayName: "Make module available"
  dependsOn: ${{ parameters.stageDependencies }}

  variables:
  - group: CIAutomation # Required to access CI variables

  pool:
    vmImage: 'ubuntu-18.04'
    
  jobs:
  - job: Go_List
    
    steps:
    - checkout: self
      submodules: recursive
      persistCredentials: true

    # Install go
    - task: GoTool@0
      displayName: 'Use go ${{ parameters.goVersion }}'
      inputs:
        version: '${{ parameters.goVersion }}'

    # Run go list to make the module available
    - bash: |
        # Fetch all tags
        git fetch --all --tags
        if [ $? != 0 ]; then
          echo "Failed to fetch all tags."
          exit 1
        fi

        # Check out current branch
        git checkout $(Build.SourceBranchName)
        if [ $? != 0 ]; then
          echo "Failed to checkout branch '$(Build.SourceBranchName)'."
          exit 1
        fi
        
        # Get tag version
        export tagName="`git tag --points-at $(Build.SourceBranchName)`"
        
        # Get module name
        export modName=`cat go.mod | awk '/module/{print $2}'`
        
        # Complete the corresponding pull request
        GOPROXY=proxy.golang.org go list -m $modName@v$tagName
      displayName: 'Make module available'
      condition: and(succeeded(), eq(variables['AutomatedRelease'], 'On'))