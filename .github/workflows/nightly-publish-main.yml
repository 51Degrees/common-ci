name: Nightly Publish Main

on:
  workflow_call:
    inputs:
        repo-name:
          required: true
          type: string
        build-platform:
          required: true
          type: string
    secrets:
      # PAT that we use to authenticate on behalf of GitHub Actions.
      token:
        required: true
      # Any secrets needed for retrieving files, signing packages or tests.
      asset-keys:
        required: true
env:
  # The default token is overwritten by the organisation scoped PAT.
  GITHUB_TOKEN: ${{ secrets.token }}

jobs:
  Configure:
    runs-on: ubuntu-latest
    outputs:
      options: ${{ steps.get_options.outputs.options }}
      version: ${{ steps.get_next_version.outputs.version }}
      update_required: ${{ steps.update_required.outputs.update_required }}
    steps:
    
      - name: Checkout Common
        uses: actions/checkout@v2
        with:
          repository: 51degrees/common-ci
          ref: gh-refact
          path: common
        
      - name: Configure Git
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/configure-git.ps1 -GitHubToken ${{ secrets.token }}
          
      - name: Clone Repo
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/constants.ps1
          . ${{ github.workspace }}/common/steps/clone-repo.ps1 -RepoName ${{ inputs.repo-name }}
          
      - name: Get Next Package Version
        id: get_next_version
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        # Obtains the next version from the repo specific script and verifies that the version is valid
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "get-next-package-version.ps1" -Options @{VariableName = "Version"}
          Write-Output version=$Version
          # Check that the version is valid
          $ParseResult = $Null
          $IsValid = [System.Version]::TryParse($Version, [ref]$ParseResult)
          if ($IsValid -eq $False) {
            Write-Error "The package version was not valid: '$Version'"
            exit 1
          }
          Write-Output version=$Version | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Package Update Required
        id: update_required
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          try {
            . ${{ github.workspace }}/common/steps/package-update-required.ps1 -RepoName ${{ inputs.repo-name }} -Version ${{ steps.get_next_version.outputs.version }}
          } finally {
            if ($LASTEXITCODE -eq 0) {
              echo update_required=true | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              echo update_required=false | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
            # Exit with a zero exit code as we don't want to fail just because an update is not required.
            exit 0
          }
          
      - name: Get Build Options
        id: get_options
        if: ${{ success() }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        # Version obtained from the preceding step is added to the options 
        # for each element of the json array as a new key value pair.
        # This ensures that the version is availabe to steps that need it for all of the runners. 
        run: |
          $OptionsFile = [IO.Path]::Combine($pwd, "${{ inputs.repo-name }}", "ci", "options.json")
          $Options = Get-Content $OptionsFile | ConvertFrom-Json
          foreach( $element in $Options)
          {
            $element | Add-Member -Name "Version" -Value "${{ steps.get_next_version.outputs.version }}" -MemberType NoteProperty
          }
          $Options = $Options | ConvertTo-Json -AsArray
          $Options = $Options -replace "`r`n", "" -replace "`n", ""
          Write-Host $Options
          echo options=$Options | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

  PreBuild:
    needs: Configure
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Pre Build - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    steps:
      - name: Checkout Common
        uses: actions/checkout@v2
        with:
          repository: 51degrees/common-ci
          ref: gh-refact
          path: common

      - name: Configure Git
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/configure-git.ps1 -GitHubToken ${{ secrets.token }}
          
      - name: Clone Repo
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/constants.ps1
          . ${{ github.workspace }}/common/steps/clone-repo.ps1 -RepoName ${{ inputs.repo-name }}

      - name: Setup Environment
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "setup-environment.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')

      - name: Build Package Requirements
        if: ${{ success() && matrix.options.packagerequirement }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "build-package-requirements.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}')

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3.1.2
        if: ${{ success() }}
        with:
          name: package_${{ matrix.options.name }}
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/package-files
          if-no-files-found: ignore   
          

  Build:
    runs-on: ${{ inputs.build-platform }}
    needs: [ PreBuild, Configure ]
    steps:
      - name: Checkout Common
        uses: actions/checkout@v2
        with:
          repository: 51degrees/common-ci
          ref: gh-refact
          path: common

      - name: Configure Git
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/configure-git.ps1 -GitHubToken ${{ secrets.token }}
          
      - name: Clone Repo
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/constants.ps1
          . ${{ github.workspace }}/common/steps/clone-repo.ps1 -RepoName ${{ inputs.repo-name }}

     #- name: Setup Environment
     #  shell: pwsh
     #  working-directory: ${{ github.workspace }}/common/
     #  run: |
     #    . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "setup-environment.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ toJSON(needs.configure.outputs.options) }}')

      - name: Download Package Artifacts
        if: ${{ success() }}
        uses: actions/download-artifact@v2.1.1
        with:
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/package-files

      - name: Build Package
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "build-package.ps1" -Options @{Version = "${{ needs.configure.outputs.version }}" }

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3.1.2
        if: ${{ success() }}
        with:
          name: package
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/package
          if-no-files-found: ignore   


  Test:
    needs: [ Build, Configure ]
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Test - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    
    steps:
      - name: Checkout Common
        uses: actions/checkout@v2
        with:
          repository: 51degrees/common-ci
          ref: gh-refact
          path: common

      - name: Configure Git
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/configure-git.ps1 -GitHubToken ${{ secrets.token }}
          
      - name: Clone Repo
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/constants.ps1
          . ${{ github.workspace }}/common/steps/clone-repo.ps1 -RepoName ${{ inputs.repo-name }}
          
      - name: Fetch Assets
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "fetch-assets.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}')
          
      - name: Setup Environment
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "setup-environment.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')

      - name: Download Package Artifact
        if: ${{ success() }}
        uses: actions/download-artifact@v2.1.1
        with:
          name: package
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/package

      - name: Install Package From Artifact
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "install-package.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')

      - name: Run Integration Tests
        id: test
        if: ${{ needs.Build.result == 'success' }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        # Secrets needed for running tests are added to options in the "Keys",
        # which can then be accessed from within the script like Keys.TestResourceKey
        run: |
          $IntegrationOptions = $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')
          $IntegrationOptions.Add("Keys", $(ConvertFrom-Json -AsHashtable '${{ secrets.asset-keys }}'))
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "run-integration-tests.ps1" -Options $IntegrationOptions
    
      - name: Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: ${{ needs.Build.result == 'success' }}
        with:
          check_name: Integration Tests - ${{ matrix.options.name }}
          files: |
            ${{ github.workspace }}/common/${{ inputs.repo-name }}/test-results/integration/**/*.trx
            ${{ github.workspace }}/common/${{ inputs.repo-name }}/test-results/integration/**/*.xml
            ${{ github.workspace }}/common/${{ inputs.repo-name }}/test-results/integration/**/*.json
          
  Package:      
    runs-on: ${{ inputs.build-platform }}
    needs: [ Test, Configure ]
    if: ${{ success() && needs.configure.outputs.update_required == 'true' }}
    steps:

      - name: Checkout Common
        uses: actions/checkout@v2
        with:
          repository: 51degrees/common-ci
          ref: gh-refact
          path: common

      - name: Configure Git
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/configure-git.ps1 -GitHubToken ${{ secrets.token }}
          
      - name: Clone Repo
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/constants.ps1
          . ${{ github.workspace }}/common/steps/clone-repo.ps1 -RepoName ${{ inputs.repo-name }}

     #- name: Setup Environment
     #  shell: pwsh
     #  working-directory: ${{ github.workspace }}/common/
     #  run: |
     #    . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "setup-environment.ps1" -Options $(ConvertFrom-Json -AsHashtable '${{ toJSON(needs.configure.outputs.options) }}')

      - name: Download Package Artifact
        if: ${{ success() }}
        uses: actions/download-artifact@v2.1.1
        with:
          name: package
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/package

      - name: Install Package From Artifact
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "install-package.ps1" -Options @{Version = "${{ needs.configure.outputs.version }}" }

      - name: Publish Packages
        if: ${{ success() }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/run-repo-script.ps1 -RepoName ${{ inputs.repo-name }} -ScriptName "publish-package.ps1" -Options @{Version = "${{ needs.configure.outputs.version }}" }
          
      - name: Update Tag
        if: ${{ success() }}
        shell: pwsh
        working-directory: ${{ github.workspace }}/common/
        run: |
          . ${{ github.workspace }}/common/steps/update-tag.ps1 -RepoName ${{ inputs.repo-name }} -Tag ${{ needs.configure.outputs.version }}
