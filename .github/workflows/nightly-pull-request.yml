name: Nightly Pull Request

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      pull-request-id:
        required: true
        type: number
      org-name:
        type: string
        default: 51degrees
      user:
        type: string
        default: Automation51D
      email:
        type: string
        default: "51DCI@51Degrees.com"
      dryrun:
        type: string
        default: false
      cache-assets:
        default: false
        type: boolean
      common-ci-ref:
        type: string
        default: ''
      branch: # Branch to use if not one calling this
        type: string
        default: ''
      build-test-timeout-minutes:
        type: number
        default: 120
    secrets:
      token:
        required: true
      AcceptCHBrowserKey:
      AcceptCHHardwareKey:
      AcceptCHNoneKey:
      AcceptCHPlatformKey:
      ApiKey:
      CsvUrl:
      DeviceDetection:
      DeviceDetectionUrl:
      JavaGpgKeyPassphrase:
      JavaPGP:
      MavenSettings:
      NPMAuthToken:
      NginxCert:
      NginxKey:
      NginxJwtToken:
      PypiToken:
      TestBrowserResourceKey:
      TestHardwareResourceKey:
      TestLicenseKey:
      TestNoSetHeaderResourceKey:
      TestPlatformResourceKey:
      TestPypiToken:
      TestResourceKey:
      TestSuperResourceKey:
      UsePublishTests:
      Pearl.License:

defaults:
  run:
    shell: pwsh
    working-directory: ./common

jobs:
  Configure:
    name : Configure - ${{ inputs.pull-request-id }}
    runs-on: ubuntu-latest
    outputs:
      options: ${{ steps.configure.outputs.options }}
      asset_cache_key: ${{ steps.hash_asset_cache_key.outputs.hash }}
    steps:
      - name: Checkout Common
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common
          ref: ${{ inputs.common-ci-ref }}

      - name: Hash the Asset Cache Key
        id: hash_asset_cache_key
        if: inputs.cache-assets
        env:
          KEY: ${{ toJSON(secrets) }}
        run: |
          $sha1 = [Security.Cryptography.SHA1Managed]::new()
          $hash = [Convert]::ToHexString($sha1.ComputeHash([Text.Encoding]::Utf8.GetBytes($env:KEY)))
          "hash=$(Get-Date -Format FileDate)-$hash" | Out-File $env:GITHUB_OUTPUT -Append

      - name: Configure
        id: configure
        run: |
          ./nightly-pull-request.configure-pr.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -Branch ${{ inputs.branch != '' && inputs.branch || github.ref_name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }}

  BuildAndTest:
    needs: Configure
    strategy:
      matrix:
        options: ${{ fromJSON(needs.configure.outputs.options ) }}
    name: Build and Test - ${{ inputs.pull-request-id }} - ${{ matrix.options.name }}
    runs-on: ${{ matrix.options.image }}
    timeout-minutes: ${{ inputs.build-test-timeout-minutes }}
    steps:
      - name: Checkout Common
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common
          ref: ${{ inputs.common-ci-ref }}

      - name: Install Runtime
        if: matrix.options.Language != '' && matrix.options.LanguageVersion != ''
        uses: ./common/.github/actions/install_runtime
        with:
          language: ${{ matrix.options.Language }}
          version: ${{ matrix.options.LanguageVersion }}

      - name: Restore Asset Cache
        if: inputs.cache-assets
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.configure.outputs.asset_cache_key }}
          path: ${{ github.workspace }}/common/assets

      - name: Build and Test
        id: build-and-test
        env:
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ toJSON(matrix.options) }}')
          $Options.Add("Keys", $(ConvertFrom-Json -AsHashtable $env:SECRETS))
          ./nightly-pull-request.build-and-test.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -Branch ${{ inputs.branch != '' && inputs.branch || github.ref_name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -Options $Options `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun

      - name: Save Asset Cache
        if: inputs.cache-assets && always()
        uses: actions/cache/save@v4
        with:
          key: ${{ needs.configure.outputs.asset_cache_key }}
          path: ${{ github.workspace }}/common/assets

      - name: Publish Test Results
        if: always()
        uses: ./common/.github/actions/publish_test_results
        with:
          repo-name: ${{ inputs.repo-name }}
          name: ${{ matrix.options.name }}
          commit: ${{ steps.build-and-test.outputs.pr-sha }}
          skip-performance: ${{ !matrix.options.runperformance }}

      - name: Upload Performance Results Artifact
        uses: actions/upload-artifact@v4
        if: ${{ matrix.options.runperformance }}
        with:
          name: performance_results-${{ inputs.pull-request-id }}-${{ matrix.options.name }}
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/test-results/performance-summary/results_*.json
          if-no-files-found: ignore
          include-hidden-files: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ inputs.pull-request-id }}-${{ matrix.options.name }}
          path: ${{ github.workspace }}/common/${{ inputs.repo-name }}/artifacts/*
          if-no-files-found: ignore
          include-hidden-files: true
          overwrite: true

  ComparePerformance:
    # This needs to run on Windows to support ScottPlot
    runs-on: windows-latest
    needs: [ Configure, BuildAndTest ]
    name: Compare Performance - ${{ inputs.pull-request-id }}
    steps:
      - name: Checkout Common
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common
          ref: ${{ inputs.common-ci-ref }}

      - name: Download Performance Results Artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: performance_results-${{ inputs.pull-request-id }}-*
          path: ${{ github.workspace }}/common
          merge-multiple: true

      - name: Compare Performance
        run: |
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          $Options = $(ConvertFrom-Json -AsHashtable '${{ needs.configure.outputs.options }}')
          ./nightly-pull-request.compare-performance.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -Branch ${{ inputs.branch != '' && inputs.branch || github.ref_name }} `
          -GitHubToken ${{ secrets.token }} `
          -GitHubOutput $Env:GITHUB_OUTPUT `
          -Options $Options `
          -RunId ${{ github.run_id }} `
          -GitHubUser ${{ inputs.user }} `
          -GitHubEmail ${{ inputs.email }} `
          -DryRun $DryRun

  Complete:
    runs-on: ubuntu-latest
    name: Complete ${{ inputs.pull-request-id }}
    needs: [ BuildAndTest, ComparePerformance ]
    steps:
      - name: Checkout Common
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.org-name }}/common-ci
          path: common
          ref: ${{ inputs.common-ci-ref }}

      - name: Complete
        run: |
          $DryRun = [bool]::Parse( "${{ inputs.dryrun }}" )
          ./nightly-pull-request.complete.ps1 `
          -RepoName ${{ inputs.repo-name }} `
          -OrgName ${{ inputs.org-name }} `
          -GitHubToken ${{ secrets.token }} `
          -PullRequestId ${{ inputs.pull-request-id }} `
          -DryRun $DryRun
